# -*- coding: utf-8 -*-
"""BarPlotsHistorical.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dx2tJxU1ZVEOIsKAROcRgbIV0lwElp2q

# Bar plots using historical data from U.S.G.S.

# Organize data
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from mpl_toolkits.mplot3d import Axes3D
import ipywidgets as widgets
from IPython.display import display
import numpy as np
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

# Path to the Excel file
file_path = 'BoxPlotData.xlsx'

# Read the Excel file
df = pd.read_excel(file_path, sheet_name='Sheet1', engine='openpyxl')

# Display the dataframe
df

# Define the list of specific site numbers
site_numbers = ['15200280', '15281000', '15283700', '15284000', '15290000']

Gulkana_df = df[df['site_no'] == 15200280]
Knik_df = df[df['site_no'] == 15281000]
MC_df = df[df['site_no'] == 15283700]
Matanuska_df = df[df['site_no'] == 15284000]
LS_df = df[df['site_no'] == 15290000]
Phelan_df = df[df['site_no'] == 15478040]

print(LS_df.head())

"""# Matanuska

Organize data
"""

# Filter Matanuska_df for specific elements
Mat_Ca = Matanuska_df[Matanuska_df['Element'] == 915] # cation
Mat_Mg = Matanuska_df[Matanuska_df['Element'] == 925] # cation
Mat_Na = Matanuska_df[Matanuska_df['Element'] == 930] # cation
Mat_K = Matanuska_df[Matanuska_df['Element'] == 935] # cation
Mat_Cl = Matanuska_df[Matanuska_df['Element'] == 940] # anion
Mat_SO4 = Matanuska_df[Matanuska_df['Element'] == 945] # anion
Mat_NO3 = Matanuska_df[Matanuska_df['Element'] == 618] # anion
Mat_F = Matanuska_df[Matanuska_df['Element'] == 950] # anion

# Display the filtered dataframe for Calcium
print(Mat_Ca.head())

"""Elemental Distribution"""

# Matanuska
fig, axes = plt.subplots(2, 4, figsize=(20, 10))
fig.suptitle('Elemental Concentration Distribution', fontsize=16)
sns.boxplot(data=Mat_Ca, y='mg/L', ax=axes[0, 0])
axes[0, 0].set_title('Calcium (Ca)')
axes[0, 0].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Mat_Mg, y='mg/L', ax=axes[0, 1])
axes[0, 1].set_title('Magnesium (Mg)')
axes[0, 1].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Mat_Na, y='mg/L', ax=axes[0, 2])
axes[0, 2].set_title('Sodium (Na)')
axes[0, 2].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Mat_K, y='mg/L', ax=axes[0, 3])
axes[0, 3].set_title('Potassium (K)')
axes[0, 3].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Mat_Cl, y='mg/L', ax=axes[1, 0])
axes[1, 0].set_title('Chloride (Cl)')
axes[1, 0].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Mat_SO4, y='mg/L', ax=axes[1, 1])
axes[1, 1].set_title('Sulfate (SO₄)')
axes[1, 1].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Mat_NO3, y='mg/L', ax=axes[1, 2])
axes[1, 2].set_title('Nitrate (NO₃)')
axes[1, 2].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Mat_F, y='mg/L', ax=axes[1, 3])
axes[1, 3].set_title('Fluoride (F)')
axes[1, 3].set_ylabel('Concentration (mg/L)')

# Adjust layout
plt.tight_layout(rect=[0, 0.03, 1, 0.95])  # Adjust to fit the main title
plt.show()

"""Date Counts"""

# Matanuska
# Define the 5-year periods between 1940 and 2025
time_frames = [(f'{year}-01-01', f'{year+5}-01-01') for year in range(1940, 2025, 5)]

def count_samples(df, time_frames):
    df['Date'] = pd.to_datetime(df['Date'])  # Ensure 'Date' is datetime
    counts = []
    for start, end in time_frames:
        count = df[(df['Date'] >= start) & (df['Date'] < end)].shape[0]
        counts.append((start[:4], end[:4], count))
    return counts

ca_counts = count_samples(Mat_Ca, time_frames)
mg_counts = count_samples(Mat_Mg, time_frames)
na_counts = count_samples(Mat_Na, time_frames)
k_counts = count_samples(Mat_K, time_frames)
cl_counts = count_samples(Mat_Cl, time_frames)
so4_counts = count_samples(Mat_SO4, time_frames)
no3_counts = count_samples(Mat_NO3, time_frames)
f_counts = count_samples(Mat_F, time_frames)

def print_counts(element, counts):
    print(f"\nSample counts for {element} (5-year periods):")
    for start, end, count in counts:
        print(f"{start}-{end}: {count} samples")

print_counts('Calcium (Ca)', ca_counts)
print_counts('Magnesium (Mg)', mg_counts)
print_counts('Sodium (Na)', na_counts)
print_counts('Potassium (K)', k_counts)
print_counts('Chloride (Cl)', cl_counts)
print_counts('Sulfate (SO₄)', so4_counts)
print_counts('Nitrate (NO₃)', no3_counts)
print_counts('Fluoride (F)', f_counts)

"""2 class date comparison"""

# Convert 'Date' column to datetime format for each dataset
for df in [Mat_Ca, Mat_Mg, Mat_Na, Mat_K, Mat_Cl, Mat_SO4, Mat_NO3, Mat_F]:
    df['Date'] = pd.to_datetime(df['Date'])

# Define a function to filter data and add time frame labels
def filter_and_label(df, time_frames):
    filtered_data = []
    for start, end in time_frames:
        subset = df[(df['Date'] >= start) & (df['Date'] <= end)].copy()
        subset['Time Frame'] = f'{start[:4]}-{end[:4]}'
        filtered_data.append(subset)
    return pd.concat(filtered_data)

# Define time frames for filtering
time_frames = [
    ('1950-01-01', '1969-12-31'),
    ('2022-01-01', '2023-12-31')
]

# Filter and label data for each element
Ca_data = filter_and_label(Mat_Ca, time_frames)
Mg_data = filter_and_label(Mat_Mg, time_frames)
Na_data = filter_and_label(Mat_Na, time_frames)
K_data = filter_and_label(Mat_K, time_frames)
Cl_data = filter_and_label(Mat_Cl, time_frames)
SO4_data = filter_and_label(Mat_SO4, time_frames)
NO3_data = filter_and_label(Mat_NO3, time_frames)
F_data = filter_and_label(Mat_F, time_frames)

# Set up the figure and subplots (2x4 grid)
fig, axes = plt.subplots(2, 4, figsize=(20, 12))
fig.suptitle('Matanuska Watershed', fontsize=38)

# Plot for each element
sns.boxplot(data=Ca_data, x='Time Frame', y='mg/L', ax=axes[0, 0])
axes[0, 0].set_title('Calcium (Ca)')
axes[0, 0].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Mg_data, x='Time Frame', y='mg/L', ax=axes[0, 1])
axes[0, 1].set_title('Magnesium (Mg)')
axes[0, 1].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Na_data, x='Time Frame', y='mg/L', ax=axes[0, 2])
axes[0, 2].set_title('Sodium (Na)')
axes[0, 2].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=K_data, x='Time Frame', y='mg/L', ax=axes[0, 3])
axes[0, 3].set_title('Potassium (K)')
axes[0, 3].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Cl_data, x='Time Frame', y='mg/L', ax=axes[1, 0])
axes[1, 0].set_title('Chloride (Cl)')
axes[1, 0].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=SO4_data, x='Time Frame', y='mg/L', ax=axes[1, 1])
axes[1, 1].set_title('Sulfate (SO₄)')
axes[1, 1].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=NO3_data, x='Time Frame', y='mg/L', ax=axes[1, 2])
axes[1, 2].set_title('Nitrate (NO₃)')
axes[1, 2].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=F_data, x='Time Frame', y='mg/L', ax=axes[1, 3])
axes[1, 3].set_title('Fluoride (F)')
axes[1, 3].set_ylabel('Concentration (mg/L)')

# Adjust layout to fit titles and labels
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.savefig('M_2class.svg', format='svg')
plt.show()

"""5 class date comparison"""

# Set up the figure and subplots (2x4 grid), increasing figure width for better spacing
fig, axes = plt.subplots(2, 4, figsize=(24, 12))
fig.suptitle('Element Concentrations (mg/L) Over Time', fontsize=18)

# Define a function to plot each element with adjusted x-axis label rotation and font size
def plot_element(data, ax, title):
    sns.boxplot(data=data, x='Time Frame', y='mg/L', ax=ax)
    ax.set_title(title)
    ax.set_ylabel('Concentration (mg/L)')
    ax.set_xlabel('')  # Remove x-axis label for cleanliness
    ax.tick_params(axis='x', rotation=45)  # Rotate x-axis labels
    ax.xaxis.label.set_size(10)
    ax.tick_params(labelsize=10)

# Plot for each element
plot_element(Ca_data, axes[0, 0], 'Calcium (Ca)')
plot_element(Mg_data, axes[0, 1], 'Magnesium (Mg)')
plot_element(Na_data, axes[0, 2], 'Sodium (Na)')
plot_element(K_data, axes[0, 3], 'Potassium (K)')
plot_element(Cl_data, axes[1, 0], 'Chloride (Cl)')
plot_element(SO4_data, axes[1, 1], 'Sulfate (SO₄)')
plot_element(NO3_data, axes[1, 2], 'Nitrate (NO₃)')
plot_element(F_data, axes[1, 3], 'Fluoride (F)')

# Adjust layout to fit titles and labels
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()

"""# Knik"""

# Knik
# Filter Knik_df for specific elements
K_Ca = Knik_df[Knik_df['Element'] == 915]
K_Mg = Knik_df[Knik_df['Element'] == 925]
K_Na = Knik_df[Knik_df['Element'] == 930]
K_K = Knik_df[Knik_df['Element'] == 935]
K_Cl = Knik_df[Knik_df['Element'] == 940]
K_SO4 = Knik_df[Knik_df['Element'] == 945]
K_NO3 = Knik_df[Knik_df['Element'] == 618]
K_F = Knik_df[Knik_df['Element'] == 950]
# Display the filtered dataframe for Calcium
print(K_Ca.head())

# Knik
# Set up the figure and subplots
fig, axes = plt.subplots(2, 4, figsize=(20, 10))
fig.suptitle('Knik Concentration Distributions', fontsize=16)

sns.boxplot(data=K_Ca, y='mg/L', ax=axes[0, 0])
axes[0, 0].set_title('Calcium (Ca)')
axes[0, 0].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=K_Mg, y='mg/L', ax=axes[0, 1])
axes[0, 1].set_title('Magnesium (Mg)')
axes[0, 1].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=K_Na, y='mg/L', ax=axes[0, 2])
axes[0, 2].set_title('Sodium (Na)')
axes[0, 2].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=K_K, y='mg/L', ax=axes[0, 3])
axes[0, 3].set_title('Potassium (K)')
axes[0, 3].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=K_Cl, y='mg/L', ax=axes[1, 0])
axes[1, 0].set_title('Chloride (Cl)')
axes[1, 0].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=K_SO4, y='mg/L', ax=axes[1, 1])
axes[1, 1].set_title('Sulfate (SO₄)')
axes[1, 1].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=K_NO3, y='mg/L', ax=axes[1, 2])
axes[1, 2].set_title('Nitrate (NO₃)')
axes[1, 2].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=K_F, y='mg/L', ax=axes[1, 3])
axes[1, 3].set_title('Fluoride (F)')
axes[1, 3].set_ylabel('Concentration (mg/L)')

plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()

# Knik
# Define the 5-year periods between 1940 and 2025
time_frames = [(f'{year}-01-01', f'{year+5}-01-01') for year in range(1940, 2025, 5)]

def count_samples(df, time_frames):
    df['Date'] = pd.to_datetime(df['Date'])  # Ensure 'Date' is datetime
    counts = []
    for start, end in time_frames:
        count = df[(df['Date'] >= start) & (df['Date'] < end)].shape[0]
        counts.append((start[:4], end[:4], count))
    return counts

ca_counts = count_samples(K_Ca, time_frames)
mg_counts = count_samples(K_Mg, time_frames)
na_counts = count_samples(K_Na, time_frames)
k_counts = count_samples(K_K, time_frames)
cl_counts = count_samples(K_Cl, time_frames)
so4_counts = count_samples(K_SO4, time_frames)
no3_counts = count_samples(K_NO3, time_frames)
f_counts = count_samples(K_F, time_frames)

def print_counts(element, counts):
    print(f"\nSample counts for {element} (5-year periods):")
    for start, end, count in counts:
        print(f"{start}-{end}: {count} samples")

print_counts('Calcium (Ca)', ca_counts)
print_counts('Magnesium (Mg)', mg_counts)
print_counts('Sodium (Na)', na_counts)
print_counts('Potassium (K)', k_counts)
print_counts('Chloride (Cl)', cl_counts)
print_counts('Sulfate (SO₄)', so4_counts)
print_counts('Nitrate (NO₃)', no3_counts)
print_counts('Fluoride (F)', f_counts)
#

# Knik
for df in [K_Ca, K_Mg, K_Na, K_K, K_F, K_Cl, K_NO3, K_SO4]:
    df['Date'] = pd.to_datetime(df['Date'])
def filter_and_label(df, time_frames):
    filtered_data = []
    for start, end in time_frames:
        subset = df[(df['Date'] >= start) & (df['Date'] <= end)].copy()
        subset['Time Frame'] = f'{start[:4]}-{end[:4]}'
        filtered_data.append(subset)
    return pd.concat(filtered_data)
time_frames = [
    ('1945-01-01', '1979-12-31'),
    ('2022-01-01', '2023-12-31')
]
Ca_data = filter_and_label(K_Ca, time_frames)
Mg_data = filter_and_label(K_Mg, time_frames)
Na_data = filter_and_label(K_Na, time_frames)
K_data = filter_and_label(K_K, time_frames)
F_data = filter_and_label(K_F, time_frames)
Cl_data = filter_and_label(K_Cl, time_frames)
NO3_data = filter_and_label(K_NO3, time_frames)
SO4_data = filter_and_label(K_SO4, time_frames)

fig, axes = plt.subplots(2, 4, figsize=(20, 12))
fig.suptitle('Knik Watershed', fontsize=38)

# Plot for each element
sns.boxplot(data=Ca_data, x='Time Frame', y='mg/L', ax=axes[0, 0])
axes[0, 0].set_title('Calcium (Ca)')
axes[0, 0].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Mg_data, x='Time Frame', y='mg/L', ax=axes[0, 1])
axes[0, 1].set_title('Magnesium (Mg)')
axes[0, 1].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Na_data, x='Time Frame', y='mg/L', ax=axes[0, 2])
axes[0, 2].set_title('Sodium (Na)')
axes[0, 2].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=K_data, x='Time Frame', y='mg/L', ax=axes[0, 3])
axes[0, 3].set_title('Potassium (K)')
axes[0, 3].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Cl_data, x='Time Frame', y='mg/L', ax=axes[1, 0])
axes[1, 0].set_title('Chloride (Cl)')
axes[1, 0].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=SO4_data, x='Time Frame', y='mg/L', ax=axes[1, 1])
axes[1, 1].set_title('Sulfate (SO₄)')
axes[1, 1].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=NO3_data, x='Time Frame', y='mg/L', ax=axes[1, 2])
axes[1, 2].set_title('Nitrate (NO₃)')
axes[1, 2].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=F_data, x='Time Frame', y='mg/L', ax=axes[1, 3])
axes[1, 3].set_title('Fluoride (F)')
axes[1, 3].set_ylabel('Concentration (mg/L)')

# Adjust layout to fit titles and labels
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
file_path = r'C:\Users\miajac\Downloads\Knik_Watershed.svg'
plt.savefig(file_path, format='svg')
plt.savefig('K_2class.svg', format='svg')
plt.show()

# Mat
for df in [Mat_Ca, Mat_Mg, Mat_Na, Mat_K, Mat_F, Mat_Cl, Mat_NO3, Mat_SO4]:
    df['Date'] = pd.to_datetime(df['Date'])

def filter_and_label(df, time_frames):
    filtered_data = []
    for start, end in time_frames:
        subset = df[(df['Date'] >= start) & (df['Date'] <= end)].copy()
        subset['Time Frame'] = f'{start[:4]}-{end[:4]}'
        filtered_data.append(subset)
    return pd.concat(filtered_data)

time_frames = [
    ('1945-01-01', '1949-12-31'),
    ('1950-01-01', '1954-12-31'),
    ('1955-01-01', '1959-12-31'),
    ('1960-01-01', '1964-12-31'),
    ('1965-01-01', '1969-12-31'),
    ('2022-01-01', '2023-12-31')
]

Ca_data = filter_and_label(Mat_Ca, time_frames)
Mg_data = filter_and_label(Mat_Mg, time_frames)
Na_data = filter_and_label(Mat_Na, time_frames)
K_data = filter_and_label(Mat_K, time_frames)
F_data = filter_and_label(Mat_F, time_frames)
Cl_data = filter_and_label(Mat_Cl, time_frames)
NO3_data = filter_and_label(Mat_NO3, time_frames)
SO4_data = filter_and_label(Mat_SO4, time_frames)

# Set up the figure and subplots (2x4 grid), increasing figure width for better spacing
fig, axes = plt.subplots(2, 4, figsize=(24, 12))
fig.suptitle('Mat Element Concentrations (mg/L) Over Time', fontsize=18)

# Define a function to plot each element with adjusted x-axis label rotation and font size
def plot_element(data, ax, title):
    sns.boxplot(data=data, x='Time Frame', y='mg/L', ax=ax)
    ax.set_title(title)
    ax.set_ylabel('Concentration (mg/L)')
    ax.set_xlabel('')
    ax.tick_params(axis='x', rotation=45)  # Rotate x-axis labels
    ax.tick_params(labelsize=10)

# Plot for each element
plot_element(Ca_data, axes[0, 0], 'Calcium (Ca)')
plot_element(Mg_data, axes[0, 1], 'Magnesium (Mg)')
plot_element(Na_data, axes[0, 2], 'Sodium (Na)')
plot_element(K_data, axes[0, 3], 'Potassium (K)')
plot_element(Cl_data, axes[1, 0], 'Chloride (Cl)')
plot_element(SO4_data, axes[1, 1], 'Sulfate (SO₄)')
plot_element(NO3_data, axes[1, 2], 'Nitrate (NO₃)')
plot_element(F_data, axes[1, 3], 'Fluoride (F)')

# Adjust layout to fit titles and labels
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()

"""# Little Susitna"""

from os import lseek
# Little Susitna
LS_Ca = LS_df[LS_df['Element'] == 915]
LS_Mg = LS_df[LS_df['Element'] == 925]
LS_Na = LS_df[LS_df['Element'] == 930]
LS_K = LS_df[LS_df['Element'] == 935]
LS_Cl = LS_df[LS_df['Element'] == 940]
LS_SO4 = LS_df[LS_df['Element'] == 945]
LS_NO3 = LS_df[LS_df['Element'] == 618]
LS_F = LS_df[LS_df['Element'] == 950]
# Display the filtered dataframe for Calcium
print(LS_Ca.head())

# Little Susitna
fig, axes = plt.subplots(2, 4, figsize=(20, 10))
fig.suptitle('Little Susitna Major Ion Concentration Distribution', fontsize=16)

sns.boxplot(data=LS_Ca, y='mg/L', ax=axes[0, 0])
axes[0, 0].set_title('Calcium (Ca)')
axes[0, 0].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=LS_Mg, y='mg/L', ax=axes[0, 1])
axes[0, 1].set_title('Magnesium (Mg)')
axes[0, 1].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=LS_Na, y='mg/L', ax=axes[0, 2])
axes[0, 2].set_title('Sodium (Na)')
axes[0, 2].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=LS_K, y='mg/L', ax=axes[0, 3])
axes[0, 3].set_title('Potassium (K)')
axes[0, 3].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=LS_Cl, y='mg/L', ax=axes[1, 0])
axes[1, 0].set_title('Chloride (Cl)')
axes[1, 0].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=LS_SO4, y='mg/L', ax=axes[1, 1])
axes[1, 1].set_title('Sulfate (SO₄)')
axes[1, 1].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=LS_NO3, y='mg/L', ax=axes[1, 2])
axes[1, 2].set_title('Nitrate (NO₃)')
axes[1, 2].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=LS_F, y='mg/L', ax=axes[1, 3])
axes[1, 3].set_title('Fluoride (F)')
axes[1, 3].set_ylabel('Concentration (mg/L)')

# Adjust layout
plt.tight_layout(rect=[0, 0.03, 1, 0.95])  # Adjust to fit the main title
plt.show()

# Little Susitna
# Define the 5-year periods between 1940 and 2025
time_frames = [(f'{year}-01-01', f'{year+5}-01-01') for year in range(1940, 2025, 5)]

def count_samples(df, time_frames):
    df['Date'] = pd.to_datetime(df['Date'])  # Ensure 'Date' is datetime
    counts = []
    for start, end in time_frames:
        count = df[(df['Date'] >= start) & (df['Date'] < end)].shape[0]
        counts.append((start[:4], end[:4], count))
    return counts

ca_counts = count_samples(LS_Ca, time_frames)
mg_counts = count_samples(LS_Mg, time_frames)
na_counts = count_samples(LS_Na, time_frames)
k_counts = count_samples(LS_K, time_frames)
f_counts = count_samples(LS_F, time_frames)
cl_counts = count_samples(LS_Cl, time_frames)
so4_counts = count_samples(LS_SO4, time_frames)
no3_counts = count_samples(LS_NO3, time_frames)

def print_counts(element, counts):
    print(f"\nSample counts for {element} (5-year periods):")
    for start, end, count in counts:
        print(f"{start}-{end}: {count} samples")

print_counts('Calcium (Ca)', ca_counts)
print_counts('Magnesium (Mg)', mg_counts)
print_counts('Sodium (Na)', na_counts)
print_counts('Potassium (K)', k_counts)
print_counts('Chloride (Cl)', cl_counts)
print_counts('Sulfate (SO₄)', so4_counts)
print_counts('Nitrate (NO₃)', no3_counts)
print_counts('Fluoride (F)', f_counts)

# Little Susitna
for df in [LS_Ca, LS_Mg, LS_Na, LS_K, LS_F, LS_Cl, LS_SO4, LS_NO3]:
    df['Date'] = pd.to_datetime(df['Date'])

def filter_and_label(df, time_frames):
    filtered_data = []
    for start, end in time_frames:
        subset = df[(df['Date'] >= start) & (df['Date'] <= end)].copy()
        subset['Time Frame'] = f'{start[:4]}-{end[:4]}'
        filtered_data.append(subset)
    return pd.concat(filtered_data)

time_frames = [
    ('1965-01-01', '1974-12-31'),
    ('2022-01-01', '2023-12-31')
]

Ca_data = filter_and_label(LS_Ca, time_frames)
Mg_data = filter_and_label(LS_Mg, time_frames)
Na_data = filter_and_label(LS_Na, time_frames)
K_data = filter_and_label(LS_K, time_frames)
F_data = filter_and_label(LS_F, time_frames)
Cl_data = filter_and_label(LS_Cl, time_frames)
NO3_data = filter_and_label(LS_NO3, time_frames)
SO4_data = filter_and_label(LS_SO4, time_frames)

fig, axes = plt.subplots(2, 4, figsize=(20, 12))
fig.suptitle('Little Susitna Watershed', fontsize=38)

# Plot for each element
sns.boxplot(data=Ca_data, x='Time Frame', y='mg/L', ax=axes[0, 0])
axes[0, 0].set_title('Calcium (Ca)')
axes[0, 0].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Mg_data, x='Time Frame', y='mg/L', ax=axes[0, 1])
axes[0, 1].set_title('Magnesium (Mg)')
axes[0, 1].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Na_data, x='Time Frame', y='mg/L', ax=axes[0, 2])
axes[0, 2].set_title('Sodium (Na)')
axes[0, 2].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=K_data, x='Time Frame', y='mg/L', ax=axes[0, 3])
axes[0, 3].set_title('Potassium (K)')
axes[0, 3].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Cl_data, x='Time Frame', y='mg/L', ax=axes[1, 0])
axes[1, 0].set_title('Chloride (Cl)')
axes[1, 0].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=SO4_data, x='Time Frame', y='mg/L', ax=axes[1, 1])
axes[1, 1].set_title('Sulfate (SO₄)')
axes[1, 1].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=NO3_data, x='Time Frame', y='mg/L', ax=axes[1, 2])
axes[1, 2].set_title('Nitrate (NO₃)')
axes[1, 2].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=F_data, x='Time Frame', y='mg/L', ax=axes[1, 3])
axes[1, 3].set_title('Fluoride (F)')
axes[1, 3].set_ylabel('Concentration (mg/L)')

# Adjust layout to fit titles and labels
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.savefig('LS_2class.svg', format='svg')
plt.show()

# Little Susitna
for df in [LS_Ca, LS_Mg, LS_Na, LS_K, LS_F, LS_Cl, LS_SO4, LS_NO3]:
    df['Date'] = pd.to_datetime(df['Date'])

def filter_and_label(df, time_frames):
    filtered_data = []
    for start, end in time_frames:
        subset = df[(df['Date'] >= start) & (df['Date'] <= end)].copy()
        subset['Time Frame'] = f'{start[:4]}-{end[:4]}'
        filtered_data.append(subset)
    return pd.concat(filtered_data)

time_frames = [
    ('1950-01-01', '1954-12-31'),
    ('1955-01-01', '1959-12-31'),
    ('1960-01-01', '1964-12-31'),
    ('1965-01-01', '1969-12-31'),
    ('2022-01-01', '2023-12-31')
]

Ca_data = filter_and_label(LS_Ca, time_frames)
Mg_data = filter_and_label(LS_Mg, time_frames)
Na_data = filter_and_label(LS_Na, time_frames)
K_data = filter_and_label(LS_K, time_frames)
F_data = filter_and_label(LS_F, time_frames)
Cl_data = filter_and_label(LS_Cl, time_frames)
NO3_data = filter_and_label(LS_NO3, time_frames)
SO4_data = filter_and_label(LS_SO4, time_frames)

# Set up the figure and subplots (2x4 grid), increasing figure width for better spacing
fig, axes = plt.subplots(2, 4, figsize=(24, 12))
fig.suptitle('Element Concentration (mg/L) by Time Frame', fontsize=18)

# Define a function to plot each element with adjusted x-axis label rotation and font size
def plot_element(data, ax, title):
    sns.boxplot(data=data, x='Time Frame', y='mg/L', ax=ax)
    ax.set_title(title)
    ax.set_ylabel('Concentration (mg/L)')
    ax.set_xlabel('')
    ax.tick_params(axis='x', rotation=45)  # Rotate x-axis labels
    ax.tick_params(labelsize=10)

# Plot for each element
plot_element(Ca_data, axes[0, 0], 'Calcium (Ca)')
plot_element(Mg_data, axes[0, 1], 'Magnesium (Mg)')
plot_element(Na_data, axes[0, 2], 'Sodium (Na)')
plot_element(K_data, axes[0, 3], 'Potassium (K)')
plot_element(Cl_data, axes[1, 0], 'Chloride (Cl)')
plot_element(SO4_data, axes[1, 1], 'Sulfate (SO₄)')
plot_element(NO3_data, axes[1, 2], 'Nitrate (NO₃)')
plot_element(F_data, axes[1, 3], 'Fluoride (F)')

# Adjust layout to fit titles and labels
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()

"""# Moose Creek"""

# Moose Creek
# Filter MC_df for specific elements
MC_Ca = MC_df[MC_df['Element'] == 915]
MC_Mg = MC_df[MC_df['Element'] == 925]
MC_Na = MC_df[MC_df['Element'] == 930]
MC_K = MC_df[MC_df['Element'] == 935]
MC_Cl = MC_df[MC_df['Element'] == 940]
MC_SO4 = MC_df[MC_df['Element'] == 945]
MC_NO3 = MC_df[MC_df['Element'] == 618]
MC_F = MC_df[MC_df['Element'] == 950]
# Display the filtered dataframe for Calcium
print(MC_NO3.head())

# Moose Creek
fig, axes = plt.subplots(2, 4, figsize=(20, 10))
fig.suptitle('Moose Creek Elemental Concentration Distribution', fontsize=16)

# Create boxplots for each element
sns.boxplot(data=MC_Ca, y='mg/L', ax=axes[0, 0])
axes[0, 0].set_title('Calcium (Ca)')
axes[0, 0].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=MC_Mg, y='mg/L', ax=axes[0, 1])
axes[0, 1].set_title('Magnesium (Mg)')
axes[0, 1].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=MC_Na, y='mg/L', ax=axes[0, 2])
axes[0, 2].set_title('Sodium (Na)')
axes[0, 2].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=MC_K, y='mg/L', ax=axes[0, 3])
axes[0, 3].set_title('Potassium (K)')
axes[0, 3].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=MC_Cl, y='mg/L', ax=axes[1, 0])
axes[1, 0].set_title('Chloride (Cl)')
axes[1, 0].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=MC_SO4, y='mg/L', ax=axes[1, 1])
axes[1, 1].set_title('Sulfate (SO₄)')
axes[1, 1].set_ylabel('Concentration (mg/L)')

sns.boxplot(data= MC_NO3, y='mg/L', ax=axes[1, 2])
axes[1, 2].set_title('Nitrate (NO₃)')
axes[1, 2].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=MC_F, y='mg/L', ax=axes[1, 3])
axes[1, 3].set_title('Fluoride (F)')
axes[1, 3].set_ylabel('Concentration (mg/L)')

# Adjust layout
plt.tight_layout(rect=[0, 0.03, 1, 0.95])  # Adjust to fit the main title
plt.show()

# Moose Creek
# Define the 5-year periods between 1940 and 2025
time_frames = [(f'{year}-01-01', f'{year+5}-01-01') for year in range(1940, 2025, 5)]

def count_samples(df, time_frames):
    df['Date'] = pd.to_datetime(df['Date'])  # Ensure 'Date' is datetime
    counts = []
    for start, end in time_frames:
        count = df[(df['Date'] >= start) & (df['Date'] < end)].shape[0]
        counts.append((start[:4], end[:4], count))
    return counts

ca_counts = count_samples(MC_Ca, time_frames)
mg_counts = count_samples(MC_Mg, time_frames)
na_counts = count_samples(MC_Na, time_frames)
k_counts = count_samples(MC_K, time_frames)
cl_counts = count_samples(MC_Cl, time_frames)
so4_counts = count_samples(MC_SO4, time_frames)
no3_counts = count_samples(MC_NO3, time_frames)
f_counts = count_samples(MC_F, time_frames)

def print_counts(element, counts):
    print(f"\nSample counts for {element} (5-year periods):")
    for start, end, count in counts:
        print(f"{start}-{end}: {count} samples")

print_counts('Calcium (Ca)', ca_counts)
print_counts('Magnesium (Mg)', mg_counts)
print_counts('Sodium (Na)', na_counts)
print_counts('Potassium (K)', k_counts)
print_counts('Chloride (Cl)', cl_counts)
print_counts('Sulfate (SO₄)', so4_counts)
print_counts('Nitrate (NO₃)', no3_counts)
print_counts('Fluoride (F)', f_counts)

# Moose Creek
for df in [MC_Ca, MC_Mg, MC_Na, MC_K, MC_F, MC_Cl, MC_NO3, MC_SO4]:
    df['Date'] = pd.to_datetime(df['Date'])
def filter_and_label(df, time_frames):
    filtered_data = []
    for start, end in time_frames:
        subset = df[(df['Date'] >= start) & (df['Date'] <= end)].copy()
        subset['Time Frame'] = f'{start[:4]}-{end[:4]}'
        filtered_data.append(subset)
    return pd.concat(filtered_data)

time_frames = [
    ('1945-01-01', '1959-12-31'),
    ('2022-01-01', '2023-12-31')
]

Ca_data = filter_and_label(MC_Ca, time_frames)
Mg_data = filter_and_label(MC_Mg, time_frames)
Na_data = filter_and_label(MC_Na, time_frames)
K_data = filter_and_label(MC_K, time_frames)
F_data = filter_and_label(MC_F, time_frames)
Cl_data = filter_and_label(MC_Cl, time_frames)
NO3_data = filter_and_label(MC_NO3, time_frames)
SO4_data = filter_and_label(MC_SO4, time_frames)

fig, axes = plt.subplots(2, 4, figsize=(20, 12))
fig.suptitle('Moose Creek Watershed', fontsize=38)

# Plot for each element
sns.boxplot(data=Ca_data, x='Time Frame', y='mg/L', ax=axes[0, 0])
axes[0, 0].set_title('Calcium (Ca)')
axes[0, 0].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Mg_data, x='Time Frame', y='mg/L', ax=axes[0, 1])
axes[0, 1].set_title('Magnesium (Mg)')
axes[0, 1].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Na_data, x='Time Frame', y='mg/L', ax=axes[0, 2])
axes[0, 2].set_title('Sodium (Na)')
axes[0, 2].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=K_data, x='Time Frame', y='mg/L', ax=axes[0, 3])
axes[0, 3].set_title('Potassium (K)')
axes[0, 3].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Cl_data, x='Time Frame', y='mg/L', ax=axes[1, 0])
axes[1, 0].set_title('Chloride (Cl)')
axes[1, 0].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=SO4_data, x='Time Frame', y='mg/L', ax=axes[1, 1])
axes[1, 1].set_title('Sulfate (SO₄)')
axes[1, 1].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=NO3_data, x='Time Frame', y='mg/L', ax=axes[1, 2])
axes[1, 2].set_title('Nitrate (NO₃)')
axes[1, 2].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=F_data, x='Time Frame', y='mg/L', ax=axes[1, 3])
axes[1, 3].set_title('Fluoride (F)')
axes[1, 3].set_ylabel('Concentration (mg/L)')

# Adjust layout to fit titles and labels
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.savefig('MC_2class.svg', format='svg')
plt.show()

# Moose Creek
for df in [MC_Ca, MC_Mg, MC_Na, MC_K, MC_F, MC_Cl, MC_NO3, MC_SO4]:
    df['Date'] = pd.to_datetime(df['Date'])
def filter_and_label(df, time_frames):
    filtered_data = []
    for start, end in time_frames:
        subset = df[(df['Date'] >= start) & (df['Date'] <= end)].copy()
        subset['Time Frame'] = f'{start[:4]}-{end[:4]}'
        filtered_data.append(subset)
    return pd.concat(filtered_data)

time_frames = [
    ('1945-01-01', '1944-12-31'),
    ('1950-01-01', '1954-12-31'),
    ('1955-01-01', '1959-12-31'),
    ('1960-01-01', '1964-12-31'),
    ('1965-01-01', '1969-12-31'),
    ('1998-01-01', '2001-12-31'),
    ('2022-01-01', '2023-12-31')
]

Ca_data = filter_and_label(MC_Ca, time_frames)
Mg_data = filter_and_label(MC_Mg, time_frames)
Na_data = filter_and_label(MC_Na, time_frames)
K_data = filter_and_label(MC_K, time_frames)
F_data = filter_and_label(MC_F, time_frames)
Cl_data = filter_and_label(MC_Cl, time_frames)
NO3_data = filter_and_label(MC_NO3, time_frames)
SO4_data = filter_and_label(MC_SO4, time_frames)

fig, axes = plt.subplots(2, 4, figsize=(20, 12))
fig.suptitle('Element Concentrations (mg/L) Over Time', fontsize=18)

# Plot for each element
sns.boxplot(data=Ca_data, x='Time Frame', y='mg/L', ax=axes[0, 0])
axes[0, 0].set_title('Calcium (Ca)')
axes[0, 0].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Mg_data, x='Time Frame', y='mg/L', ax=axes[0, 1])
axes[0, 1].set_title('Magnesium (Mg)')
axes[0, 1].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Na_data, x='Time Frame', y='mg/L', ax=axes[0, 2])
axes[0, 2].set_title('Sodium (Na)')
axes[0, 2].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=K_data, x='Time Frame', y='mg/L', ax=axes[0, 3])
axes[0, 3].set_title('Potassium (K)')
axes[0, 3].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=Cl_data, x='Time Frame', y='mg/L', ax=axes[1, 0])
axes[1, 0].set_title('Chloride (Cl)')
axes[1, 0].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=SO4_data, x='Time Frame', y='mg/L', ax=axes[1, 1])
axes[1, 1].set_title('Sulfate (SO₄)')
axes[1, 1].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=NO3_data, x='Time Frame', y='mg/L', ax=axes[1, 2])
axes[1, 2].set_title('Nitrate (NO₃)')
axes[1, 2].set_ylabel('Concentration (mg/L)')

sns.boxplot(data=F_data, x='Time Frame', y='mg/L', ax=axes[1, 3])
axes[1, 3].set_title('Fluoride (F)')
axes[1, 3].set_ylabel('Concentration (mg/L)')

# Adjust layout to fit titles and labels
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()